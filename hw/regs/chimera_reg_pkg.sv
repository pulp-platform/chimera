// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package chimera_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [31:0] q;} chimera_reg2hw_snitch_boot_addr_reg_t;

  typedef struct packed {logic [31:0] q;} chimera_reg2hw_snitch_configurable_boot_addr_reg_t;

  typedef struct packed {logic [31:0] q;} chimera_reg2hw_snitch_intr_handler_addr_reg_t;

  typedef struct packed {logic [31:0] q;} chimera_reg2hw_snitch_cluster_0_return_reg_t;

  typedef struct packed {logic [31:0] q;} chimera_reg2hw_snitch_cluster_1_return_reg_t;

  typedef struct packed {logic [31:0] q;} chimera_reg2hw_snitch_cluster_2_return_reg_t;

  typedef struct packed {logic [31:0] q;} chimera_reg2hw_snitch_cluster_3_return_reg_t;

  typedef struct packed {logic [31:0] q;} chimera_reg2hw_snitch_cluster_4_return_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_reset_cluster_0_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_reset_cluster_1_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_reset_cluster_2_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_reset_cluster_3_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_reset_cluster_4_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_0_clk_gate_en_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_1_clk_gate_en_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_2_clk_gate_en_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_3_clk_gate_en_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_4_clk_gate_en_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_wide_mem_cluster_0_bypass_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_wide_mem_cluster_1_bypass_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_wide_mem_cluster_2_bypass_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_wide_mem_cluster_3_bypass_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_wide_mem_cluster_4_bypass_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_0_busy_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_1_busy_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_2_busy_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_3_busy_reg_t;

  typedef struct packed {logic q;} chimera_reg2hw_cluster_4_busy_reg_t;

  // Register -> HW type
  typedef struct packed {
    chimera_reg2hw_snitch_boot_addr_reg_t              snitch_boot_addr;               // [275:244]
    chimera_reg2hw_snitch_configurable_boot_addr_reg_t snitch_configurable_boot_addr;  // [243:212]
    chimera_reg2hw_snitch_intr_handler_addr_reg_t      snitch_intr_handler_addr;       // [211:180]
    chimera_reg2hw_snitch_cluster_0_return_reg_t       snitch_cluster_0_return;        // [179:148]
    chimera_reg2hw_snitch_cluster_1_return_reg_t       snitch_cluster_1_return;        // [147:116]
    chimera_reg2hw_snitch_cluster_2_return_reg_t       snitch_cluster_2_return;        // [115:84]
    chimera_reg2hw_snitch_cluster_3_return_reg_t       snitch_cluster_3_return;        // [83:52]
    chimera_reg2hw_snitch_cluster_4_return_reg_t       snitch_cluster_4_return;        // [51:20]
    chimera_reg2hw_reset_cluster_0_reg_t               reset_cluster_0;                // [19:19]
    chimera_reg2hw_reset_cluster_1_reg_t               reset_cluster_1;                // [18:18]
    chimera_reg2hw_reset_cluster_2_reg_t               reset_cluster_2;                // [17:17]
    chimera_reg2hw_reset_cluster_3_reg_t               reset_cluster_3;                // [16:16]
    chimera_reg2hw_reset_cluster_4_reg_t               reset_cluster_4;                // [15:15]
    chimera_reg2hw_cluster_0_clk_gate_en_reg_t         cluster_0_clk_gate_en;          // [14:14]
    chimera_reg2hw_cluster_1_clk_gate_en_reg_t         cluster_1_clk_gate_en;          // [13:13]
    chimera_reg2hw_cluster_2_clk_gate_en_reg_t         cluster_2_clk_gate_en;          // [12:12]
    chimera_reg2hw_cluster_3_clk_gate_en_reg_t         cluster_3_clk_gate_en;          // [11:11]
    chimera_reg2hw_cluster_4_clk_gate_en_reg_t         cluster_4_clk_gate_en;          // [10:10]
    chimera_reg2hw_wide_mem_cluster_0_bypass_reg_t     wide_mem_cluster_0_bypass;      // [9:9]
    chimera_reg2hw_wide_mem_cluster_1_bypass_reg_t     wide_mem_cluster_1_bypass;      // [8:8]
    chimera_reg2hw_wide_mem_cluster_2_bypass_reg_t     wide_mem_cluster_2_bypass;      // [7:7]
    chimera_reg2hw_wide_mem_cluster_3_bypass_reg_t     wide_mem_cluster_3_bypass;      // [6:6]
    chimera_reg2hw_wide_mem_cluster_4_bypass_reg_t     wide_mem_cluster_4_bypass;      // [5:5]
    chimera_reg2hw_cluster_0_busy_reg_t                cluster_0_busy;                 // [4:4]
    chimera_reg2hw_cluster_1_busy_reg_t                cluster_1_busy;                 // [3:3]
    chimera_reg2hw_cluster_2_busy_reg_t                cluster_2_busy;                 // [2:2]
    chimera_reg2hw_cluster_3_busy_reg_t                cluster_3_busy;                 // [1:1]
    chimera_reg2hw_cluster_4_busy_reg_t                cluster_4_busy;                 // [0:0]
  } chimera_reg2hw_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CHIMERA_SNITCH_BOOT_ADDR_OFFSET = 7'h0;
  parameter logic [BlockAw-1:0] CHIMERA_SNITCH_CONFIGURABLE_BOOT_ADDR_OFFSET = 7'h4;
  parameter logic [BlockAw-1:0] CHIMERA_SNITCH_INTR_HANDLER_ADDR_OFFSET = 7'h8;
  parameter logic [BlockAw-1:0] CHIMERA_SNITCH_CLUSTER_0_RETURN_OFFSET = 7'hc;
  parameter logic [BlockAw-1:0] CHIMERA_SNITCH_CLUSTER_1_RETURN_OFFSET = 7'h10;
  parameter logic [BlockAw-1:0] CHIMERA_SNITCH_CLUSTER_2_RETURN_OFFSET = 7'h14;
  parameter logic [BlockAw-1:0] CHIMERA_SNITCH_CLUSTER_3_RETURN_OFFSET = 7'h18;
  parameter logic [BlockAw-1:0] CHIMERA_SNITCH_CLUSTER_4_RETURN_OFFSET = 7'h1c;
  parameter logic [BlockAw-1:0] CHIMERA_RESET_CLUSTER_0_OFFSET = 7'h20;
  parameter logic [BlockAw-1:0] CHIMERA_RESET_CLUSTER_1_OFFSET = 7'h24;
  parameter logic [BlockAw-1:0] CHIMERA_RESET_CLUSTER_2_OFFSET = 7'h28;
  parameter logic [BlockAw-1:0] CHIMERA_RESET_CLUSTER_3_OFFSET = 7'h2c;
  parameter logic [BlockAw-1:0] CHIMERA_RESET_CLUSTER_4_OFFSET = 7'h30;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_0_CLK_GATE_EN_OFFSET = 7'h34;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_1_CLK_GATE_EN_OFFSET = 7'h38;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_2_CLK_GATE_EN_OFFSET = 7'h3c;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_3_CLK_GATE_EN_OFFSET = 7'h40;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_4_CLK_GATE_EN_OFFSET = 7'h44;
  parameter logic [BlockAw-1:0] CHIMERA_WIDE_MEM_CLUSTER_0_BYPASS_OFFSET = 7'h48;
  parameter logic [BlockAw-1:0] CHIMERA_WIDE_MEM_CLUSTER_1_BYPASS_OFFSET = 7'h4c;
  parameter logic [BlockAw-1:0] CHIMERA_WIDE_MEM_CLUSTER_2_BYPASS_OFFSET = 7'h50;
  parameter logic [BlockAw-1:0] CHIMERA_WIDE_MEM_CLUSTER_3_BYPASS_OFFSET = 7'h54;
  parameter logic [BlockAw-1:0] CHIMERA_WIDE_MEM_CLUSTER_4_BYPASS_OFFSET = 7'h58;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_0_BUSY_OFFSET = 7'h5c;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_1_BUSY_OFFSET = 7'h60;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_2_BUSY_OFFSET = 7'h64;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_3_BUSY_OFFSET = 7'h68;
  parameter logic [BlockAw-1:0] CHIMERA_CLUSTER_4_BUSY_OFFSET = 7'h6c;

  // Register index
  typedef enum int {
    CHIMERA_SNITCH_BOOT_ADDR,
    CHIMERA_SNITCH_CONFIGURABLE_BOOT_ADDR,
    CHIMERA_SNITCH_INTR_HANDLER_ADDR,
    CHIMERA_SNITCH_CLUSTER_0_RETURN,
    CHIMERA_SNITCH_CLUSTER_1_RETURN,
    CHIMERA_SNITCH_CLUSTER_2_RETURN,
    CHIMERA_SNITCH_CLUSTER_3_RETURN,
    CHIMERA_SNITCH_CLUSTER_4_RETURN,
    CHIMERA_RESET_CLUSTER_0,
    CHIMERA_RESET_CLUSTER_1,
    CHIMERA_RESET_CLUSTER_2,
    CHIMERA_RESET_CLUSTER_3,
    CHIMERA_RESET_CLUSTER_4,
    CHIMERA_CLUSTER_0_CLK_GATE_EN,
    CHIMERA_CLUSTER_1_CLK_GATE_EN,
    CHIMERA_CLUSTER_2_CLK_GATE_EN,
    CHIMERA_CLUSTER_3_CLK_GATE_EN,
    CHIMERA_CLUSTER_4_CLK_GATE_EN,
    CHIMERA_WIDE_MEM_CLUSTER_0_BYPASS,
    CHIMERA_WIDE_MEM_CLUSTER_1_BYPASS,
    CHIMERA_WIDE_MEM_CLUSTER_2_BYPASS,
    CHIMERA_WIDE_MEM_CLUSTER_3_BYPASS,
    CHIMERA_WIDE_MEM_CLUSTER_4_BYPASS,
    CHIMERA_CLUSTER_0_BUSY,
    CHIMERA_CLUSTER_1_BUSY,
    CHIMERA_CLUSTER_2_BUSY,
    CHIMERA_CLUSTER_3_BUSY,
    CHIMERA_CLUSTER_4_BUSY
  } chimera_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CHIMERA_PERMIT[28] = '{
      4'b1111,  // index[ 0] CHIMERA_SNITCH_BOOT_ADDR
      4'b1111,  // index[ 1] CHIMERA_SNITCH_CONFIGURABLE_BOOT_ADDR
      4'b1111,  // index[ 2] CHIMERA_SNITCH_INTR_HANDLER_ADDR
      4'b1111,  // index[ 3] CHIMERA_SNITCH_CLUSTER_0_RETURN
      4'b1111,  // index[ 4] CHIMERA_SNITCH_CLUSTER_1_RETURN
      4'b1111,  // index[ 5] CHIMERA_SNITCH_CLUSTER_2_RETURN
      4'b1111,  // index[ 6] CHIMERA_SNITCH_CLUSTER_3_RETURN
      4'b1111,  // index[ 7] CHIMERA_SNITCH_CLUSTER_4_RETURN
      4'b0001,  // index[ 8] CHIMERA_RESET_CLUSTER_0
      4'b0001,  // index[ 9] CHIMERA_RESET_CLUSTER_1
      4'b0001,  // index[10] CHIMERA_RESET_CLUSTER_2
      4'b0001,  // index[11] CHIMERA_RESET_CLUSTER_3
      4'b0001,  // index[12] CHIMERA_RESET_CLUSTER_4
      4'b0001,  // index[13] CHIMERA_CLUSTER_0_CLK_GATE_EN
      4'b0001,  // index[14] CHIMERA_CLUSTER_1_CLK_GATE_EN
      4'b0001,  // index[15] CHIMERA_CLUSTER_2_CLK_GATE_EN
      4'b0001,  // index[16] CHIMERA_CLUSTER_3_CLK_GATE_EN
      4'b0001,  // index[17] CHIMERA_CLUSTER_4_CLK_GATE_EN
      4'b0001,  // index[18] CHIMERA_WIDE_MEM_CLUSTER_0_BYPASS
      4'b0001,  // index[19] CHIMERA_WIDE_MEM_CLUSTER_1_BYPASS
      4'b0001,  // index[20] CHIMERA_WIDE_MEM_CLUSTER_2_BYPASS
      4'b0001,  // index[21] CHIMERA_WIDE_MEM_CLUSTER_3_BYPASS
      4'b0001,  // index[22] CHIMERA_WIDE_MEM_CLUSTER_4_BYPASS
      4'b0001,  // index[23] CHIMERA_CLUSTER_0_BUSY
      4'b0001,  // index[24] CHIMERA_CLUSTER_1_BUSY
      4'b0001,  // index[25] CHIMERA_CLUSTER_2_BUSY
      4'b0001,  // index[26] CHIMERA_CLUSTER_3_BUSY
      4'b0001  // index[27] CHIMERA_CLUSTER_4_BUSY
  };

endpackage

