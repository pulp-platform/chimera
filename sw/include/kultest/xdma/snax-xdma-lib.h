// Copyright 2024 KU Leuven.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Yunhao Deng <yunhao.deng@kuleuven.be>

#pragma once
#include <stdbool.h>
#include <stdint.h>
// Define the CSR address of xdma, should be generated by scala
#include "snax-xdma-csr-addr.h"

// Set CSR for xdma
int xdma_memcpy_nd(unsigned char* src, unsigned char* dst, unsigned int* spatial_stride_src,
                       unsigned int* spatial_stride_dst, unsigned int temp_dim_src,
                       unsigned int* temp_stride_src, unsigned int* temp_bound_src,
                       unsigned int temp_dim_dst, unsigned int* temp_stride_dst,
                       unsigned int* temp_bound_dst, unsigned int enabled_chan_src,
                       unsigned int enabled_chan_dst, unsigned int enabled_byte_dst);
int xdma_memcpy_1d(unsigned char* src, unsigned char* dst, unsigned int size);
int xdma_enable_src_ext(unsigned char ext, unsigned int* csr_value);
int xdma_disable_src_ext(unsigned char ext);
int xdma_enable_dst_ext(unsigned char ext, unsigned int* csr_value);
int xdma_disable_dst_ext(unsigned char ext);

// Start xdma
unsigned int xdma_start();

// Check if xdma is finished
bool xdma_is_finished(unsigned int task_id);

void xdma_wait(unsigned int task_id);
