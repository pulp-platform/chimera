// Copyright 2025 ETH Zurich and University of Bologna.
// Licensed under the Apache License, Version 2 0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Generated by PeakRDL-cheader - A free and open-source header generator
//  https://github.com/SystemRDL/PeakRDL-cheader

#ifndef CHIMERA_ADDRMAP_H
#define CHIMERA_ADDRMAP_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <assert.h>

// Reg - chimera_regs_NumClusters_5::snitch_boot_addr
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_BOOT_ADDR__SNITCH_BOOT_ADDR_bm 0xffffffff
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_BOOT_ADDR__SNITCH_BOOT_ADDR_bp 0
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_BOOT_ADDR__SNITCH_BOOT_ADDR_bw 32
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_BOOT_ADDR__SNITCH_BOOT_ADDR_reset 0xbadcab1e
typedef union {
    struct __attribute__((__packed__)) {
        uint32_t SNITCH_BOOT_ADDR : 32;
    } f;
    uint32_t w;
} chimera_regs_NumClusters_5__snitch_boot_addr_t;

// Reg - chimera_regs_NumClusters_5::snitch_configurable_boot_addr
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_CONFIGURABLE_BOOT_ADDR__SNITCH_CONFIGURABLE_BOOT_ADDR_bm \
    0xffffffff
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_CONFIGURABLE_BOOT_ADDR__SNITCH_CONFIGURABLE_BOOT_ADDR_bp \
    0
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_CONFIGURABLE_BOOT_ADDR__SNITCH_CONFIGURABLE_BOOT_ADDR_bw \
    32
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_CONFIGURABLE_BOOT_ADDR__SNITCH_CONFIGURABLE_BOOT_ADDR_reset \
    0x30000000
typedef union {
    struct __attribute__((__packed__)) {
        uint32_t SNITCH_CONFIGURABLE_BOOT_ADDR : 32;
    } f;
    uint32_t w;
} chimera_regs_NumClusters_5__snitch_configurable_boot_addr_t;

// Reg - chimera_regs_NumClusters_5::snitch_intr_handler_addr
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_INTR_HANDLER_ADDR__SNITCH_INTR_HANDLER_ADDR_bm 0xffffffff
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_INTR_HANDLER_ADDR__SNITCH_INTR_HANDLER_ADDR_bp 0
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_INTR_HANDLER_ADDR__SNITCH_INTR_HANDLER_ADDR_bw 32
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_INTR_HANDLER_ADDR__SNITCH_INTR_HANDLER_ADDR_reset \
    0xbadcab1e
typedef union {
    struct __attribute__((__packed__)) {
        uint32_t SNITCH_INTR_HANDLER_ADDR : 32;
    } f;
    uint32_t w;
} chimera_regs_NumClusters_5__snitch_intr_handler_addr_t;

// Reg - chimera_regs_NumClusters_5::snitch_cluster_return
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_CLUSTER_RETURN__SNITCH_CLUSTER_RETURN_bm 0xffffffff
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_CLUSTER_RETURN__SNITCH_CLUSTER_RETURN_bp 0
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_CLUSTER_RETURN__SNITCH_CLUSTER_RETURN_bw 32
#define CHIMERA_REGS_NUMCLUSTERS_5__SNITCH_CLUSTER_RETURN__SNITCH_CLUSTER_RETURN_reset 0x0
typedef union {
    struct __attribute__((__packed__)) {
        uint32_t SNITCH_CLUSTER_RETURN : 32;
    } f;
    uint32_t w;
} chimera_regs_NumClusters_5__snitch_cluster_return_t;

// Reg - chimera_regs_NumClusters_5::reset_cluster
#define CHIMERA_REGS_NUMCLUSTERS_5__RESET_CLUSTER__RESET_CLUSTER_bm 0x1
#define CHIMERA_REGS_NUMCLUSTERS_5__RESET_CLUSTER__RESET_CLUSTER_bp 0
#define CHIMERA_REGS_NUMCLUSTERS_5__RESET_CLUSTER__RESET_CLUSTER_bw 1
#define CHIMERA_REGS_NUMCLUSTERS_5__RESET_CLUSTER__RESET_CLUSTER_reset 0x1
typedef union {
    struct __attribute__((__packed__)) {
        uint32_t RESET_CLUSTER : 1;
        uint32_t : 31;
    } f;
    uint32_t w;
} chimera_regs_NumClusters_5__reset_cluster_t;

// Reg - chimera_regs_NumClusters_5::cluster_clk_gate_en
#define CHIMERA_REGS_NUMCLUSTERS_5__CLUSTER_CLK_GATE_EN__CLUSTER_CLK_GATE_EN_bm 0x1
#define CHIMERA_REGS_NUMCLUSTERS_5__CLUSTER_CLK_GATE_EN__CLUSTER_CLK_GATE_EN_bp 0
#define CHIMERA_REGS_NUMCLUSTERS_5__CLUSTER_CLK_GATE_EN__CLUSTER_CLK_GATE_EN_bw 1
#define CHIMERA_REGS_NUMCLUSTERS_5__CLUSTER_CLK_GATE_EN__CLUSTER_CLK_GATE_EN_reset 0x1
typedef union {
    struct __attribute__((__packed__)) {
        uint32_t CLUSTER_CLK_GATE_EN : 1;
        uint32_t : 31;
    } f;
    uint32_t w;
} chimera_regs_NumClusters_5__cluster_clk_gate_en_t;

// Reg - chimera_regs_NumClusters_5::wide_mem_cluster_bypass
#define CHIMERA_REGS_NUMCLUSTERS_5__WIDE_MEM_CLUSTER_BYPASS__WIDE_MEM_CLUSTER_BYPASS_bm 0x1
#define CHIMERA_REGS_NUMCLUSTERS_5__WIDE_MEM_CLUSTER_BYPASS__WIDE_MEM_CLUSTER_BYPASS_bp 0
#define CHIMERA_REGS_NUMCLUSTERS_5__WIDE_MEM_CLUSTER_BYPASS__WIDE_MEM_CLUSTER_BYPASS_bw 1
#define CHIMERA_REGS_NUMCLUSTERS_5__WIDE_MEM_CLUSTER_BYPASS__WIDE_MEM_CLUSTER_BYPASS_reset 0x0
typedef union {
    struct __attribute__((__packed__)) {
        uint32_t WIDE_MEM_CLUSTER_BYPASS : 1;
        uint32_t : 31;
    } f;
    uint32_t w;
} chimera_regs_NumClusters_5__wide_mem_cluster_bypass_t;

// Reg - chimera_regs_NumClusters_5::cluster_busy
#define CHIMERA_REGS_NUMCLUSTERS_5__CLUSTER_BUSY__CLUSTER_BUSY_bm 0x1
#define CHIMERA_REGS_NUMCLUSTERS_5__CLUSTER_BUSY__CLUSTER_BUSY_bp 0
#define CHIMERA_REGS_NUMCLUSTERS_5__CLUSTER_BUSY__CLUSTER_BUSY_bw 1
#define CHIMERA_REGS_NUMCLUSTERS_5__CLUSTER_BUSY__CLUSTER_BUSY_reset 0x0
typedef union {
    struct __attribute__((__packed__)) {
        uint32_t CLUSTER_BUSY : 1;
        uint32_t : 31;
    } f;
    uint32_t w;
} chimera_regs_NumClusters_5__cluster_busy_t;

// Addrmap - chimera_regs_NumClusters_5
typedef struct __attribute__((__packed__)) {
    chimera_regs_NumClusters_5__snitch_boot_addr_t snitch_boot_addr;
    chimera_regs_NumClusters_5__snitch_configurable_boot_addr_t snitch_configurable_boot_addr;
    chimera_regs_NumClusters_5__snitch_intr_handler_addr_t snitch_intr_handler_addr;
    chimera_regs_NumClusters_5__snitch_cluster_return_t snitch_cluster_return[5];
    chimera_regs_NumClusters_5__reset_cluster_t reset_cluster[5];
    chimera_regs_NumClusters_5__cluster_clk_gate_en_t cluster_clk_gate_en[5];
    chimera_regs_NumClusters_5__wide_mem_cluster_bypass_t wide_mem_cluster_bypass[5];
    chimera_regs_NumClusters_5__cluster_busy_t cluster_busy[5];
} chimera_regs_NumClusters_5_t;

// Addrmap - cheshire_host_NumClusters_5
typedef struct __attribute__((__packed__)) {
    uint8_t RESERVED_0_fff[0x1000];
    chimera_regs_NumClusters_5_t chimera_regs;
} cheshire_host_NumClusters_5_t;

// Mem - snitch_cluster::dummy
typedef struct __attribute__((__packed__)) {
    uint64_t mem[1];
} snitch_cluster__dummy_t;

// Addrmap - snitch_cluster
typedef struct __attribute__((__packed__)) {
    snitch_cluster__dummy_t dummy;
    uint8_t RESERVED_8_1fffff[0x1ffff8];
} snitch_cluster__stride200000_t;

// Mem - chimera_addrmap_NumClusters_5::l2_mem_island
typedef struct __attribute__((__packed__)) {
    uint8_t mem[262144];
} chimera_addrmap_NumClusters_5__l2_mem_island_t;

// Addrmap - chimera_addrmap_NumClusters_5
typedef struct __attribute__((__packed__)) {
    uint8_t RESERVED_0_2fffffff[0x30000000];
    cheshire_host_NumClusters_5_t host;
    uint8_t RESERVED_30001070_3fffffff[0xfffef90];
    snitch_cluster__stride200000_t snitch_cluster[5];
    uint8_t RESERVED_40a00000_47ffffff[0x7600000];
    chimera_addrmap_NumClusters_5__l2_mem_island_t l2_mem_island;
} chimera_addrmap_NumClusters_5_t;

// Instances
#define chimera_addrmap (*(volatile chimera_addrmap_NumClusters_5_t *)0x0UL)

static_assert(sizeof(chimera_addrmap_NumClusters_5_t) == 0x48040000, "Packing error");

#ifdef __cplusplus
}
#endif

#endif /* CHIMERA_ADDRMAP_H */
